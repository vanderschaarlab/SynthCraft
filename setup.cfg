[metadata]
name = climb-ai
description = CliMB: An AI-enabled Partner for Clinical Predictive Modeling
author = Evgeny Saveliev
author_email = e.s.saveliev@gmail.com
license = Apache-2.0
license_files = LICENSE.txt
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8; variant=GFM
url = https://www.vanderschaar-lab.com/
project_urls =
    Documentation = https://climb-ai.readthedocs.io/en/latest/
    Source = https://github.com/vanderschaarlab/climb
    Changelog = https://github.com/vanderschaarlab/climb/releases
    Tracker = https://github.com/vanderschaarlab/climb/issues

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    Intended Audience :: Healthcare Industry
    Intended Audience :: Science/Research
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Topic :: Scientific/Engineering :: Medical Science Apps.
    Topic :: Software Development :: Code Generators
    Topic :: Software Development :: User Interfaces


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.9

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    autoprognosis
    Boruta
    data-iq
    gputil
    hyperimpute
    lifelines
    markdown
    matplotlib
    numpy
    nutree
    openai
    pandas
    pdfplumber
    plotly
    psutil
    pydantic >= 2, < 3
    python-dotenv
    pyyaml
    rich
    ruamel.yaml
    scienceplots
    scikit-learn
    scipy
    seaborn
    shap
    streamlit >= 1.36.0  # Min version for compatibility with st.dialog() and some CSS selector definitions.
    streamlit-antd-components >= 0.3.2
    streamlit-js >= 1.0.8
    tiktoken
    tinydb
    tinydb-serialization
    weasyprint


[options.packages.find]
where = src
exclude =
    .dev
    .vscode
    tests
    wd

[options.extras_require]
# Add here additional requirements for extra features, to install with:

# Requirements for generating project docs.
docs =
    blacken-docs
    furo  # Minimalist and modern theme for Sphinx.
    jupyter  # For any notebook tutorials.
    myst-parser
    nbsphinx  # For converting Jupyter notebooks to Sphinx.
    pyscaffold >= 4.6  # pyscaffold included just in case, as the project was created with it.
    pyscaffoldext-markdown >= 0.5  # pyscaffoldext-markdown included just in case, as the docs were created with it.
    ruff
    sphinx >=7.4
    sphinx-inline-tabs

# Requirements for project testing.
testing =
    %(docs)s
    pre-commit
    pytest
    pytest-cov
    pytest-mock
    pytest-xdist

# Requirements for project development.
dev =
    %(testing)s
    bandit[toml]
    build
    mypy >= 1.0.0
    pylint
    ruff
    setuptools >= 46.1.0  # Should match pyproject.toml/[build-system]
    setuptools_scm[toml] >= 5  # Should match pyproject.toml/[build-system]
    tox
    twine


[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = climb.module:function
# For example:
# console_scripts =
#     fibonacci = climb.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov climb
    --cov-report term-missing
    --verbose
norecursedirs =
    .dev
    .tox
    .vscode
    build
    dist
    wd
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

# Using ruff instead.
# [flake8]
# # Some sane defaults for the code style checker flake8
# max_line_length = 88
# extend_ignore = E203, W503
# # ^  Black-compatible
# #    E203 and W503 have edge cases handled by black
# exclude =
#     .tox
#     build
#     dist
#     .eggs
#     docs/conf.py

[pylint]
max-line-length = 120
disable = R, C
enable = useless-suppression
# generated-members = torch.*  # Add as needed.
# extension-pkg-whitelist = pydantic  # Add as needed.

[pylint.messages_control]
disable = C0330, C0326, fixme, c-extension-no-member

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.6
package = climb
extensions =
    markdown
    no_skeleton
    pre_commit


# NOTE: See pyproject.toml for the rest of the configuration.
